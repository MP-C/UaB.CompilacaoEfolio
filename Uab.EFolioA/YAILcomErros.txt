structs {
    a1asd{int x y
} }

structs #início
 point2D { x,y; }; # point2D é composta por 2 reais x e y
 point2D { x;y, }; # point2D é composta por 2 reais x e y
 point3D { float }; # point3D por 3 reais x, y e z
 point3D { tni }; # point3D por 3 reais x, y e z
 pointND {[]}     ###### pointnD é um vetor de reais
}



struct{
 # definição # # # # # estruturas
}
constt{}
const ()

const ({})
const { float de = 10,10; }
const { int jkl = 100, float aaa = 20,20; }
const { int mno = 100, bool bbb = false; }
const { int pqr = 100, bool ccc = true; }
const { stu = 100, float ddd = 20,20; }
const { vwx = 100, eee = 20,20; }
const { x = 100, fff = true, hhh = 12,12; }
const { z = 100, ggg = false; }
const { int jkl = 100, float aaa = 20.20; }
const { int mno = 100, bool bbb = false; }
const { int pqr = 100, bool ccc = true; }
const { stu = 100, float ddd = 20.20; }
const { vwx = 100, eee = 20.20; }
const { x = 100, fff = true, hhh = 12.12; }
const { z = 100, ggg = false; }
const { # comentario dento de const
    int j = square_root(pow);
    int k = square_root(pow(q.x+e.a,8)+pow(1,8));
    int l = square_root(pow(q.x+e.1,8),2);
    int m = write();
    int n = write_all();
    int o = write_string();
    int p = read();
    int q = read_all();
    int r = read_string();
}

const {
    pow(1,8);
    square_root(8);
}



#GLOBAL
globale{)
globale(}


# funções
int a;
int v_2[+];
int v[[2];
int v[2]];
size();
resize(v,n);
resize(v,);
resize(,n);
resize(1,v);
resize(1,2);
pow(a,d);
pow(1,m);
pow(d,1);
raiz(1w);
raiz(q);

main() bool{
    int e*a;
    int 11*a;
    int e*12;
   }

# constantes
const { int jkl = 100; float mno = 20,20; }